@page "/equipamentos/armas-brancas-basicas"
@using System.Text.Json
@using Starfinder.Shield.Models

<PageTitle>Armas Brancas Básicas - Starfinder Shield</PageTitle>
<link href="css/equipamentos.css" rel="stylesheet" />

<div class="equipamentos-container">
    <div class="equipamentos-header">
        <h1 class="equipamentos-title">⚔️ Armas Brancas Básicas</h1>
        <p class="equipamentos-subtitle">Equipamentos de Combate Corpo a Corpo</p>
    </div>

    <div class="search-container-equipamentos">
        <i class="bi bi-search search-icon-equipamentos"></i>
        <input type="text"
               class="search-input-equipamentos"
               placeholder="Buscar armas por nome, grupo ou característica..."
               @bind="search"
               @bind:event="oninput" />
    </div>

    @if (items is null)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
            <p>Carregando arsenal...</p>
        </div>
    }
    else
    {
        var filteredItems = items.Where(i =>
            string.IsNullOrWhiteSpace(search) ||
            i.Nome.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            i.Grupo.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            i.Especial.Contains(search, StringComparison.OrdinalIgnoreCase)
        ).ToList();

        @if (filteredItems.Any())
        {
            <div class="table-wrapper">
                <table class="equipamentos-table">
                    <thead>
                        <tr>
                            <th>Grupo</th>
                            <th>Nome da Arma</th>
                            <th>Nível</th>
                            <th>Preço</th>
                            <th>Dano</th>
                            <th>Crítico</th>
                            <th>Volume</th>
                            <th>Especial</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in filteredItems)
                        {
                            <tr>
                                <td>@item.Grupo</td>
                                <td>@item.Nome</td>
                                <td><span class="nivel-badge">@item.Nivel</span></td>
                                <td><span class="preco-text">@item.Preco</span></td>
                                <td><span class="dano-text">@item.Dano</span></td>
                                <td><span class="critico-text">@item.Critico</span></td>
                                <td>@item.Volume</td>
                                <td>@item.Especial</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="no-results-equipamentos">
                <i class="bi bi-search" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>
                <p>Nenhuma arma encontrada para "<strong>@search</strong>"</p>
            </div>
        }

        <button class="back-to-top-equipamentos" @onclick="ScrollToTop" title="Voltar ao topo">
            <i class="bi bi-arrow-up"></i>
        </button>
    }
</div>

@code {
    private List<ArmaItem>? items;
    private string search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var json = await Http.GetStringAsync("armas-brancas-basicas.json");
            var doc = JsonDocument.Parse(json);
            var list = new List<ArmaItem>();
            foreach (var el in doc.RootElement.EnumerateArray())
            {
                list.Add(new ArmaItem
                {
                    Grupo = el.GetProperty("grupo").GetString() ?? string.Empty,
                    Nome = el.GetProperty("nome").GetString() ?? string.Empty,
                    Nivel = el.GetProperty("nivel").GetInt32(),
                    Preco = el.GetProperty("preco").GetString() ?? string.Empty,
                    Dano = el.GetProperty("dano").GetString() ?? string.Empty,
                    Critico = el.GetProperty("critico").GetString() ?? string.Empty,
                    Volume = el.GetProperty("volume").GetString() ?? string.Empty,
                    Especial = el.GetProperty("especial").GetString() ?? string.Empty
                });
            }
            items = list;
        }
        catch (Exception) { }
    }

    private async Task ScrollToTop()
    {
        await Task.CompletedTask;
    }

    [Inject]
    private HttpClient Http { get; set; } = default!;
}
