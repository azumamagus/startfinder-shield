@page "/condicoes"
@inject HttpClient Http
@using System.Text.Json

<link href="css/condicoes-new.css" rel="stylesheet" />

@if (!string.IsNullOrEmpty(erro))
{
    <div class="condicoes-container">
        <div class="condicoes-header">
            <h1 class="condicoes-title">Erro ao Carregar</h1>
            <p style="color: #ff00ff; text-align: center;">@erro</p>
        </div>
    </div>
}
else if (categorias is null)
{
    <div class="condicoes-container">
        <div class="condicoes-header">
            <h1 class="condicoes-title">Carregando...</h1>
            <p class="condicoes-subtitle">Preparando condi√ß√µes de jogo</p>
        </div>
    </div>
}
else
{
    <div class="condicoes-container">
        <div class="condicoes-header">
            <h1 class="condicoes-title">Condi√ß√µes de Jogo</h1>
            <p class="condicoes-subtitle">Guia Completo de Condi√ß√µes Starfinder</p>
        </div>

        <div class="search-container-condicoes">
            <i class="bi bi-search search-icon-condicoes"></i>
            <input type="text"
                   class="search-input-condicoes"
                   placeholder="Buscar condi√ß√µes por nome ou descri√ß√£o..."
                   @bind="search"
                   @bind:event="oninput" />
        </div>

        @foreach (var categoria in categorias)
        {
            var condicoesFiltered = categoria.CondicoesDetalhadas
                .Where(c => string.IsNullOrWhiteSpace(search) ||
                           c.Nome.Contains(search, StringComparison.OrdinalIgnoreCase) ||
                           c.Descricao.Contains(search, StringComparison.OrdinalIgnoreCase))
                .ToList();

            @if (condicoesFiltered.Any())
            {
                <div class="condicao-categoria-section">
                    <h2 class="condicao-categoria-title">@categoria.Categoria</h2>

                    <div class="condicoes-grid">
                        @foreach (var condicao in condicoesFiltered)
                        {
                            <div class="condicao-card-new">
                                <div class="condicao-card-header-new">
                                    <div class="condicao-icon-new">
                                        @GetIconForCategory(categoria.Categoria)
                                    </div>
                                    <h3 class="condicao-nome-new">@condicao.Nome</h3>
                                </div>
                                <p class="condicao-descricao-new">@condicao.Descricao</p>
                            </div>
                        }
                    </div>
                </div>
            }
        }

        @if (!categorias.Any(c => c.CondicoesDetalhadas.Any(cd =>
            string.IsNullOrWhiteSpace(search) ||
            cd.Nome.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            cd.Descricao.Contains(search, StringComparison.OrdinalIgnoreCase))))
        {
            <div class="no-results-condicoes">
                <i class="bi bi-search" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>
                <p>Nenhuma condi√ß√£o encontrada para "<strong>@search</strong>"</p>
            </div>
        }

        <button class="back-to-top-condicoes" @onclick="ScrollToTop" title="Voltar ao topo">
            <i class="bi bi-arrow-up"></i>
        </button>
    </div>
}

@code {
    private List<CondicaoCategoria>? categorias;
    private string? erro;
    private string search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CarregarCategoriasAsync();
    }

    private async Task CarregarCategoriasAsync()
    {
        try
        {
            var json = await Http.GetStringAsync("condicoes.json");
            categorias = new List<CondicaoCategoria>();
            using var doc = JsonDocument.Parse(json);
            foreach (var cat in doc.RootElement.GetProperty("condicoes").EnumerateArray())
            {
                var novaCat = new CondicaoCategoria
                {
                    Categoria = cat.GetProperty("categoria").GetString() ?? string.Empty,
                    CondicoesDetalhadas = new List<CondicaoDetalhada>()
                };
                foreach (var cond in cat.GetProperty("condicoes_detalhadas").EnumerateArray())
                {
                    novaCat.CondicoesDetalhadas.Add(new CondicaoDetalhada
                    {
                        Nome = cond.GetProperty("nome").GetString() ?? string.Empty,
                        Descricao = cond.GetProperty("descricao").GetString() ?? string.Empty
                    });
                }
                categorias.Add(novaCat);
            }
        }
        catch (Exception ex)
        {
            erro = ex.Message;
        }
    }

    private string GetIconForCategory(string categoria)
    {
        return categoria switch
        {
            "Combate e A√ß√£o" => "‚öîÔ∏è",
            "Percep√ß√£o e Sentidos" => "üëÅÔ∏è",
            "Estados Mentais" => "üß†",
            "Condi√ß√µes F√≠sicas" => "üí™",
            "Morte e Consci√™ncia" => "üíÄ",
            "Atitudes e Posi√ß√µes" => "üèÉ",
            _ => "‚ú®"
        };
    }

    private async Task ScrollToTop()
    {
        await Task.CompletedTask;
    }

    public class CondicaoCategoria
    {
        public string Categoria { get; set; } = string.Empty;
        public List<CondicaoDetalhada> CondicoesDetalhadas { get; set; } = new();
    }

    public class CondicaoDetalhada
    {
        public string Nome { get; set; } = string.Empty;
        public string Descricao { get; set; } = string.Empty;
    }
}
